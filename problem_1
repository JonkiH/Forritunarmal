
(define (maxElement li)(apply max li))

(define (elementAtIndex li index) (list-ref li (- index 1)))

(define (compress li) 
  (reverse(forcompress 1 (list (car li)) li))
)
(define (forcompress index compLi li)
  (if(<= index (length li))
     (        
        forcompress (+ index 1) (addIfNotIn compLi (elementAtIndex li index)) li
     )
     compLi
  )
)
(define (addIfNotIn li item)
  (if (checkList li item)
      (cons item li)
      li
  )
)
(define (checkList li item)
  (if(not(null? li))(
   if(eqv? (car li) item)
     (= 1 2)
     (checkList (cdr li) item)))
)

(define (maxofmax li) 
  (maxElement (maxofmax! li (list)))
)
(define (maxofmax! li max)
  (
   if(not(null? li))
     (
      maxofmax! (cdr li) (cons (checkNested (car li)) max)
     )
     max
  )
)
(define (checkNested li)
  (maxElement li)
)

(define (split li no) (split! li no (list) (list)))
(define (split! li no one two)
  (
     if(not (null? li))(
       if(< 0 no)
       (split! (cdr li) (- no 1) (cons (car li) one) two)
       (split! (cdr li) (- no 1) one (cons (car li) two))
     )
     (list(reverse one) (reverse two))
   )
)



(define (for index max li)
  (if(<= index (length li))
     (
        
        for (+ index 1) max li
     )
     max
  )
)


(define (ll)(list ' 1 2 3 10 5 6 7 ))
(define (tA)(maxElement '(5 3 7 2 6 1 4)))
(define (tB)(elementAtIndex '(a b c d e f) 4))
(define (tC)(compress '(a a d a b b c c a c d d d d e f f))) 
(define (tD)(maxofmax '((5 3 6 2) (1 6 2 7) (7 3 8 2 9) (6 2 4 4 5 6 1)))) 
(define (tE)(split '(a b c d e f g) 3)) 
